
section .data
    a times 4 dq 4
    solution dq 0

section .text
    global _start


_start:
    xor rcx, rcx
    xor r8, r8
    xor r9, r9

bucle:
    cmp rcx, 3
    jge final
    mov r9, [a + 4 * rcx]
    add r8, r9
    inc rcx
    jmp bucle

imprime:;pushea en pila el resultado digito por digito
    xor rcx, rcx
    mov r8, 10
    mov rcx, [solution]
    xor rbx, rbx
    xor rdx, rdx

division:; para imprimir el numero con cantidad de digitos desconocida, guardaremos digito a digito en la pila y los iremos sacando 
    mov rax, rcx
    cmp rax, r8 ;si el numero es de 1 digito (<10, almacenado en r8) entonces sale del bucle
    jl aux
    
    ;despues del div, rdx: residuo y rax: cociente
    div r8 ; saca el menor digito y lo guarda en la pila (esto solo se ejecuta cuando ya se sabe que el numero es de mas de 1 digito)
    inc rbx
    push rdx;rdx contiene el residuo al dividir el numero entre 10
    
    mov rcx, rax
    jmp division

aux:
    push rax
    inc rbx ; rbx almacena el numero de digitos de la solucion, para luego saber cuantos numeros hay que retirar de la pila


loopprint:
    cmp rbx, 0 
    je final
    dec rbx 
    pop rcx

    add rcx, 30H ; hallamos el valor ASCII del numero para imprimirlo (numero equivalente para el caracter)
    mov [solution], rcx ; movemos el numero que vamos a imprimir a solution

    mov rax, 1
    mov rdi, 1
    mov rsi, solution
    mov rdx, 1
    syscall
    jmp loopprint

    mov r8, 10
    mov [char], r8
final:
	mov rax, 1
	mov rdi, 1
	mov rsi, char
	mov rdx, 1
	syscall

	mov rax, 60
	mov rdi, 0
	syscall
